//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AIO.AIOWebService1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:aio", ConfigurationName="AIOWebService1.aioPortType")]
    public interface aioPortType {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:aio#teach", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        string teach(string pattern, string provision, string nick, string token, string authority);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:aio#teach", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> teachAsync(string pattern, string provision, string nick, string token, string authority);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:aio#talk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        string talk(string pattern, string token, string authority);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:aio#talk", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="return")]
        System.Threading.Tasks.Task<string> talkAsync(string pattern, string token, string authority);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface aioPortTypeChannel : AIO.AIOWebService1.aioPortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class aioPortTypeClient : System.ServiceModel.ClientBase<AIO.AIOWebService1.aioPortType>, AIO.AIOWebService1.aioPortType {
        
        public aioPortTypeClient() {
        }
        
        public aioPortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public aioPortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public aioPortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public aioPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string teach(string pattern, string provision, string nick, string token, string authority) {
            return base.Channel.teach(pattern, provision, nick, token, authority);
        }
        
        public System.Threading.Tasks.Task<string> teachAsync(string pattern, string provision, string nick, string token, string authority) {
            return base.Channel.teachAsync(pattern, provision, nick, token, authority);
        }
        
        public string talk(string pattern, string token, string authority) {
            return base.Channel.talk(pattern, token, authority);
        }
        
        public System.Threading.Tasks.Task<string> talkAsync(string pattern, string token, string authority) {
            return base.Channel.talkAsync(pattern, token, authority);
        }
    }
}
